# **************************************** Barman configuration ********************************************
  - name: Remove previouse pg data | Activation
    become: true
    become_user: barman
    file:
     path: /var/lib/barman/pg
     state: absent


  - name: Barman global file configuration
    become: true
    blockinfile:
     dest: /etc/barman.conf
     block: |
        ;*****************************Modify By User *************************" }
        barman_user = barman
        barman_home = /var/lib/barman
        log_file = /var/log/barman/barman.log
        compression = gzip
        retention_policy = RECOVERY WINDOW OF 4 WEEKS
    when: ansible_nodename == "pgbackup"

  - name: Barman pg file create
    delegate_to: "{{barman1ip}}"
    become: true
    file:
     path: /etc/barman.d/pg.conf
     state: touch
    when: ansible_nodename == "pgbackup"

  - name: Barman server configure
    delegate_to: "{{barman1ip}}"
    become: true
    become_user: root
    blockinfile:
     dest: /etc/barman.d/pg.conf
     block: |

        ; ******************Modified by user***************
        [pg]
        ; Human readable description
        description =  "Example of PostgreSQL Database (Streaming-Only)"
        ; PostgreSQL connection string (mandatory)
        ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; conninfo = host={{ node1ip }} user=barman dbname=postgres
        ; description =  Example of PostgreSQL Database (Streaming-Only)
        ; streaming_conninfo = host={{ node1ip }} user=streaming_barman
        ; streaming_backup_name = barman_streaming_backup
        ; slot_name = barman_slot
        ; create_slot = auto
        ; backup_method = postgres
        ; streaming_archiver_name = barman_receive_wal
        ; streaming_archiver_batch_size = 50
        ; path_prefix = /usr/pgsql-{{ pg_version }}/bin
        ; streaming_archiver=on
        ; archiver=on

        
        ssh_command = ssh postgres@{{ node1ip }}
        conninfo = host={{ node1ip }} user=barman dbname=postgres port={{pg_port}}
        backup_method = rsync
        backup_options = concurrent_backup
        streaming_archiver = on
        archiver=on
        slot_name = barman_slot
        path_prefix = "/usr/pgsql-{{ pg_version }}/bin"

        streaming_conninfo = host={{ node1ip }} user=streaming_barman port={{pg_port}}
        streaming_backup_name = barman_streaming_backup
        streaming_archiver_name = barman_receive_wal
        streaming_archiver_batch_size = 50
        streaming_archiver = on
        create_slot = auto
    when: ansible_nodename == "pgbackup"

