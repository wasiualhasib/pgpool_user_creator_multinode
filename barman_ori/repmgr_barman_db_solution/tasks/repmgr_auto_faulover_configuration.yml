# **************************************** repmgr auto failover configuration ********************************************

  - name: Configure repmgr.conf  auto failover configuration | AUTO FAILOVER NODE1
    become: true
    blockinfile:
     dest: /etc/repmgr/{{ pg_version }}/repmgr.conf
     marker: "# {mark} ANSIBLE MANAGED BLOCK insertion 2"
     block: |
        #*************** for automatic failover
        failover=automatic
        use_replication_slots=yes
        promote_command='/usr/pgsql-{{ pg_version }}/bin/repmgr standby promote -f /etc/repmgr/{{ pg_version }}/repmgr.conf --siblings-follow  --log-to-file'
        follow_command='/usr/pgsql-{{ pg_version }}/bin/repmgr standby follow -f /etc/repmgr/{{ pg_version }}/repmgr.conf --log-to-file --upstream-node-id=%n'
        #****************** for connect checking command
        connection_check_type='ping'
        monitor_interval_secs=10
        monitoring_history=yes
        reconnect_attempts=10
        reconnect_interval=10
        primary_visibility_consensus=true
        standby_disconnect_on_failover=true
        log_status_interval=60
        #******************* for system command
        repmgrd_service_start_command='sudo /usr/bin/systemctl start repmgr-{{ pg_version }}.service'
        repmgrd_service_stop_command='sudo /usr/bin/systemctl stop repmgr-{{ pg_version }}.service'
        service_start_command='sudo /usr/bin/systemctl start postgresql-{{ pg_version }}.service'
        service_stop_command='sudo /usr/bin/systemctl stop postgresql-{{ pg_version }}.service'
        service_restart_command='sudo /usr/bin/systemctl restart postgresql-{{ pg_version }}.service'
        service_reload_command='sudo /usr/bin/systemctl reload postgresql-{{ pg_version }}.service'
        #******************* others
        pg_bindir='/usr/pgsql-{{ pg_version }}/bin'
        log_file='/var/log/repmgr/repmgr.log'
        #******************* for marman configuration
        barman_host='barman@{{barman1ip}}'
        barman_server='pg'
        restore_command='/usr/bin/barman-wal-restore -U barman "{{barman1ip}}" pg %f %p'

    when: ansible_nodename == "node1" 
 
# **************************************** repmgr auto failover configuration ********************************************
  - name: Configure repmgr.conf  auto failover configuration | AUTO FAILOVER NODE2
    become: true
    blockinfile:
     dest: /etc/repmgr/{{ pg_version }}/repmgr.conf
     marker: "# {mark} ANSIBLE MANAGED BLOCK insertion 2"
     block: |
        #*************** for automatic failover
        failover=automatic
        use_replication_slots=yes
        promote_command='/usr/pgsql-{{ pg_version }}/bin/repmgr standby promote -f /etc/repmgr/{{ pg_version }}/repmgr.conf --siblings-follow  --log-to-file'
        follow_command='/usr/pgsql-{{ pg_version }}/bin/repmgr standby follow -f /etc/repmgr/{{ pg_version }}/repmgr.conf --log-to-file --upstream-node-id=%n'
        #****************** for connect checking command
        connection_check_type='ping'
        monitor_interval_secs=10
        monitoring_history=yes
        reconnect_attempts=10
        reconnect_interval=10
        primary_visibility_consensus=true
        standby_disconnect_on_failover=true
        log_status_interval=60
        #******************* for system command
        repmgrd_service_start_command='sudo /usr/bin/systemctl start repmgr-{{ pg_version }}.service'
        repmgrd_service_stop_command='sudo /usr/bin/systemctl stop repmgr-{{ pg_version }}.service'
        service_start_command='sudo /usr/bin/systemctl start postgresql-{{ pg_version }}.service'
        service_stop_command='sudo /usr/bin/systemctl stop postgresql-{{ pg_version }}.service'
        service_restart_command='sudo /usr/bin/systemctl restart postgresql-{{ pg_version }}.service'
        service_reload_command='sudo /usr/bin/systemctl reload postgresql-{{ pg_version }}.service'
        #******************* others
        pg_bindir='/usr/pgsql-{{ pg_version }}/bin'
        log_file='/var/log/repmgr/repmgr.log'
        #******************* for marman configuration
        barman_host='barman@{{barman1ip}}'
        barman_server='pg'
        restore_command='/usr/bin/barman-wal-restore -U barman "{{barman1ip}}" pg %f %p'

    when: ansible_nodename == "node2"


    
# **************************************** repmgr auto failover configuration ********************************************

  - name: Configure repmgr.conf  auto failover configuration | AUTO FAILOVER NODE3
    become: true
    blockinfile:
     dest: /etc/repmgr/{{ pg_version }}/repmgr.conf
     marker: "# {mark} ANSIBLE MANAGED BLOCK insertion 2"
     block: |
        #*************** for automatic failover
        failover=automatic
        use_replication_slots=yes
        promote_command='/usr/pgsql-{{ pg_version }}/bin/repmgr standby promote -f /etc/repmgr/{{ pg_version }}/repmgr.conf --siblings-follow  --log-to-file'
        follow_command='/usr/pgsql-{{ pg_version }}/bin/repmgr standby follow -f /etc/repmgr/{{ pg_version }}/repmgr.conf --log-to-file --upstream-node-id=%n'
        #****************** for connect checking command
        connection_check_type='ping'
        monitor_interval_secs=10
        monitoring_history=yes
        reconnect_attempts=10
        reconnect_interval=10
        primary_visibility_consensus=true
        standby_disconnect_on_failover=true
        log_status_interval=60
        #******************* for system command
        repmgrd_service_start_command='sudo /usr/bin/systemctl start repmgr-{{ pg_version }}.service'
        repmgrd_service_stop_command='sudo /usr/bin/systemctl stop repmgr-{{ pg_version }}.service'
        service_start_command='sudo /usr/bin/systemctl start postgresql-{{ pg_version }}.service'
        service_stop_command='sudo /usr/bin/systemctl stop postgresql-{{ pg_version }}.service'
        service_restart_command='sudo /usr/bin/systemctl restart postgresql-{{ pg_version }}.service'
        service_reload_command='sudo /usr/bin/systemctl reload postgresql-{{ pg_version }}.service'
        #******************* others
        pg_bindir='/usr/pgsql-{{ pg_version }}/bin'
        log_file='/var/log/repmgr/repmgr.log'
        #******************* for marman configuration
        barman_host='barman@{{barman1ip}}'
        barman_server='pg'
        restore_command='/usr/bin/barman-wal-restore -U barman "{{barman1ip}}" pg %f %p'

    when: ansible_nodename == "node3"
